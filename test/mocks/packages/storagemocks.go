// Code generated by MockGen. DO NOT EDIT.
// Source: ../../storage/storage.go

// Package storagemocks is a generated GoMock package.
package storagemocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	storage "yandex-devops/storage"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetOne mocks base method
func (m *MockStorage) GetOne(key string) (*storage.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", key)
	ret0, _ := ret[0].(*storage.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne
func (mr *MockStorageMockRecorder) GetOne(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockStorage)(nil).GetOne), key)
}

// GetAll mocks base method
func (m *MockStorage) GetAll() ([]storage.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]storage.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockStorageMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStorage)(nil).GetAll))
}

// SetOne mocks base method
func (m *MockStorage) SetOne(metric storage.Metrics) (*storage.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOne", metric)
	ret0, _ := ret[0].(*storage.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetOne indicates an expected call of SetOne
func (mr *MockStorageMockRecorder) SetOne(metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOne", reflect.TypeOf((*MockStorage)(nil).SetOne), metric)
}

// SetAll mocks base method
func (m *MockStorage) SetAll(metric []storage.Metrics) ([]storage.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAll", metric)
	ret0, _ := ret[0].([]storage.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAll indicates an expected call of SetAll
func (mr *MockStorageMockRecorder) SetAll(metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAll", reflect.TypeOf((*MockStorage)(nil).SetAll), metric)
}

// Close mocks base method
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}
